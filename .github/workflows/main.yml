name: Build

on: [push, pull_request]

jobs:
    cmake:
        strategy:
            matrix:
                include:
                - os: ubuntu-20.04
                  cmakeFlags: -G Ninja
                - os: macos-latest
                - os: windows-latest

        runs-on: ${{ matrix.os }}
        steps:
        - uses: actions/checkout@v1

        - name: Setup
          if: startsWith(matrix.os, 'ubuntu')
          run: |
            sudo apt-get update
            sudo apt-get install build-essential git cmake ninja-build pkg-config \
            libasound2-dev libpulse-dev libaudio-dev libjack-dev libx11-dev libxext-dev \
            libxrandr-dev libxcursor-dev libxi-dev libxinerama-dev libxxf86vm-dev \
            libxss-dev libgl1-mesa-dev libdbus-1-dev libudev-dev libgles2-mesa-dev \
            libegl1-mesa-dev libibus-1.0-dev fcitx-libs-dev libsamplerate0-dev \
            libsndio-dev libwayland-dev libxkbcommon-dev libdrm-dev libgbm-dev

        - name: Build
          run: |
            mkdir build
            cd build
            cmake .. ${{ matrix.cmakeFlags }} -DSDL_TEST=ON
            cmake --build .

    configure:
        strategy:
            matrix:
                include:
                - os: ubuntu-20.04
                  configureFlags: --enable-video-kmsdrm
                - os: macos-latest

        runs-on: ${{ matrix.os }}
        steps:
        - uses: actions/checkout@v1

        - name: Setup
          if: startsWith(matrix.os, 'ubuntu')
          run: |
            sudo apt-get update
            sudo apt-get install build-essential git make autoconf automake libtool pkg-config \
            libasound2-dev libpulse-dev libaudio-dev libjack-dev libx11-dev libxext-dev \
            libxrandr-dev libxcursor-dev libxi-dev libxinerama-dev libxxf86vm-dev \
            libxss-dev libgl1-mesa-dev libdbus-1-dev libudev-dev libgles2-mesa-dev \
            libegl1-mesa-dev libibus-1.0-dev fcitx-libs-dev libsamplerate0-dev \
            libsndio-dev libwayland-dev libxkbcommon-dev libdrm-dev libgbm-dev

        - name: Build
          run: |
            ./configure ${{ matrix.configureFlags }}
            make -j2

    mingw:
        strategy:
            matrix:
                msystem: [MINGW32, MINGW64]

        runs-on: windows-latest
        steps:
        - uses: actions/checkout@v1
        
        - uses: msys2/setup-msys2@v2
          if: ${{ matrix.msystem }}
          with:
              msystem: ${{ matrix.msystem }}
              install: >-
                  base-devel
                  git

        - name: Build
          shell: msys2 {0}
          run: |
            ./configure ${{ matrix.configureFlags }}
            make -j2
